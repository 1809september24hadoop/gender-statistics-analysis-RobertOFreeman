package com.revature.testificate;

	import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mrunit.mapreduce.MapDriver;
import org.apache.hadoop.mrunit.mapreduce.MapReduceDriver;
import org.apache.hadoop.mrunit.mapreduce.ReduceDriver;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.revature.bountyhunt.BountyHuntMapper;
import com.revature.bountyhunt.BountyHuntReducer;
import com.revature.femalegrad.FemGradMapper;
import com.revature.femalegrad.FemGradReducer;
import com.revature.percentfememp.PercentFemEmpMapper;
import com.revature.percentfememp.PercentFemEmpReducer;
import com.revature.percentmaleemp.PercentMalEmpMapper;
import com.revature.percentmaleemp.PercentMalEmpReducer;
import com.revature.usfemeducation.FemEduReducer;
import com.revature.usfemeducation.femeduMapper;

	public class Testinator {
		public static String inputS ="\"Afghanistan\",\"AFG\",\"Gross graduation ratio, primary, female (%)\",\"SE.PRM.CMPL.FE.ZS\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"45.02818\",\"46.33514\",\"\",\"39.55557\",\"41.65403\",\"47.07411\",\"49.00927\",\"\",\"\",";

		public static Double outputD = 49.00927;
		public static String outputS = "Afghanistan,HighSchool,";
	  /*
	   * Declare harnesses that let you test a mapper, a reducer, and
	   * a mapper and a reducer working together.
	   */
	  private MapDriver<LongWritable, Text, Text, IntWritable> mapDriver;
	  private ReduceDriver<Text, IntWritable, Text, DoubleWritable> reduceDriver;
	  private MapReduceDriver<LongWritable, Text, Text, IntWritable, Text, DoubleWritable> mapReduceDriver;

	  /*
	   * Set up the test. This method will be called before every test.
	   */
	  @Before
	  public void setUp() {

	    /*
	     * Set up the mapper test harness.
	     */
	    FemGradMapper mapper = new FemGradMapper();
	    mapDriver = new MapDriver<LongWritable, Text, Text, IntWritable>();
	    mapDriver.setMapper(mapper);

	    /*
	     * Set up the reducer test harness.
	     */
	    FemGradReducer reducer = new FemGradReducer();
	    reduceDriver = new ReduceDriver<Text, IntWritable, Text, DoubleWritable>();
	    reduceDriver.setReducer(reducer);

	    /*
	     * Set up the mapper/reducer test harness.
	     */
	    mapReduceDriver = new MapReduceDriver<LongWritable, Text, Text, IntWritable, Text, DoubleWritable>();
	    mapReduceDriver.setMapper(mapper);
	    mapReduceDriver.setReducer(reducer);
	  }

	  /*
	   * Test the mapper.
	   */
	  @Test
	  public void testMapper() {

	    /*
	     * For this test, the mapper's input will be "1 cat cat dog" 
	     */
	    mapDriver.withInput(new LongWritable(1), new Text(inputS));

	    /*
	     * The expected output is "cat 1", "cat 1", and "dog 1".
	     */
	    mapDriver.withOutput(new Text(inputS), new IntWritable(0));

	    /*
	     * Run the test.
	     */
	    mapDriver.runTest();
	  }

	  /*
	   * Test the reducer.
	   */
	  @Test
	  public void testReducer() {

	    List<IntWritable> values = new ArrayList<IntWritable>();
	    values.add(new IntWritable(1));

	    /*
	     * For this test, the reducer's input will be "cat 1 1".
	     */
	    reduceDriver.withInput(new Text(inputS), values);

	    /*
	     * The expected output is "cat 2"
	     */
	    reduceDriver.withOutput(new Text(outputS), new DoubleWritable(outputD));

	    /*
	     * Run the test.
	     */
	    reduceDriver.runTest();
	  }

	  /*
	   * Test the mapper and reducer working together.
	   */
	  @Test
	  public void testMapReduce() {

	    /*
	     * For this test, the mapper's input will be "1 cat cat dog" 
	     */
	    mapReduceDriver.withInput(new LongWritable(1), new Text(inputS));

	    /*
	     * The expected output (from the reducer) is "cat 2", "dog 1". 
	     */
	    mapReduceDriver.addOutput(new Text(outputS), new DoubleWritable(outputD));

	    /*
	     * Run the test.
	     */
	    mapReduceDriver.runTest();
	  }
	}
class TestinatorB{
	
	public static String inputS = "\"United States\",\"USA\",\"Gross graduation ratio, tertiary, female (%)\",\"SE.TER.CMPL.FE.ZS\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"35.85857\",\"37.8298\",\"37.43131\",\"38.22037\",\"39.18913\",\"39.84185\",\"40.23865\",\"41.26198\",\"42.00725\",\"42.78946\",\"43.68347\",\"\",\"46.37914\",\"47.68032\",\"\",\"\",\"\",\"\",";
	public String = "bob";
	
	public static String output1s ="Global Increase"	
	
	2004-2005,	0.39679999999999893
	2009-2011,	2.69567
	2007-2008,	0.7822099999999992
	2000-2001,	-0.39848999999999535
	2006-2007,	0.7452699999999979
	2003-2004,	0.6527200000000022
	2011-2012,	1.3011800000000022
	2002-2003,	0.9687599999999961
	2008-2009,	0.8940100000000015
	2005-2006,	1.0233300000000014
	2001-2002,	0.7890599999999992

	
	
	
	public static Double outputD = 49.00927;
	public static String outputS = "Afghanistan,HighSchool,";
  /*
   * Declare harnesses that let you test a mapper, a reducer, and
   * a mapper and a reducer working together.
   */
  private MapDriver<LongWritable, Text, Text, IntWritable> mapDriver;
  private ReduceDriver<Text, IntWritable, Text, DoubleWritable> reduceDriver;
  private MapReduceDriver<LongWritable, Text, Text, IntWritable, Text, DoubleWritable> mapReduceDriver;

  /*
   * Set up the test. This method will be called before every test.
   */
  @Before
  public void setUp() {

    /*
     * Set up the mapper test harness.
     */
    femeduMapper mapper = new femeduMapper();
    mapDriver = new MapDriver<LongWritable, Text, Text, IntWritable>();
    mapDriver.setMapper(mapper);

    /*
     * Set up the reducer test harness.
     */
    FemEduReducer reducer = new FemEduReducer();
    reduceDriver = new ReduceDriver<Text, IntWritable, Text, DoubleWritable>();
    reduceDriver.setReducer(reducer);

    /*
     * Set up the mapper/reducer test harness.
     */
    mapReduceDriver = new MapReduceDriver<LongWritable, Text, Text, IntWritable, Text, DoubleWritable>();
    mapReduceDriver.setMapper(mapper);
    mapReduceDriver.setReducer(reducer);
  }

  /*
   * Test the mapper.
   */
  @Test
  public void testMapper() {

    /*
     * For this test, the mapper's input will be "1 cat cat dog" 
     */
    mapDriver.withInput(new LongWritable(1), new Text(inputS));

    /*
     * The expected output is "cat 1", "cat 1", and "dog 1".
     */
    mapDriver.withOutput(new Text(inputS), new IntWritable(0));

    /*
     * Run the test.
     */
    mapDriver.runTest();
  }

  /*
   * Test the reducer.
   */
  @Test
  public void testReducer() {

    List<IntWritable> values = new ArrayList<IntWritable>();
    values.add(new IntWritable(1));

    /*
     * For this test, the reducer's input will be "cat 1 1".
     */
    reduceDriver.withInput(new Text(inputS), values);

    /*
     * The expected output is "cat 2"
     */
    reduceDriver.withOutput(new Text(outputS), new DoubleWritable(outputD));

    /*
     * Run the test.
     */
    reduceDriver.runTest();
  }

  /*
   * Test the mapper and reducer working together.
   */
  @Test
  public void testMapReduce() {

    /*
     * For this test, the mapper's input will be "1 cat cat dog" 
     */
    mapReduceDriver.withInput(new LongWritable(1), new Text(inputS));

    /*
     * The expected output (from the reducer) is "cat 2", "dog 1". 
     */
    mapReduceDriver.addOutput(new Text(outputS), new DoubleWritable(outputD));

    /*
     * Run the test.
     */
    mapReduceDriver.runTest();
  }
}

